{"version":3,"sources":["reducer/actions.js","components/todoInput.jsx","components/todoItem.jsx","components/todoList.jsx","App.jsx","reportWebVitals.js","reducer/states.js","reducer/store.js","reducer/reducer.js","index.js"],"names":["ADD_TODO","UPDATE_TODO","DELETE_TODO","Todoinput","dispatch","useDispatch","useState","name","setname","className","onInput","e","target","value","type","placeholder","onClick","todo","id","Math","random","payload","Todoitem","eitdable","setEitdable","finshed","setFinshed","setName","defaultValue","updateTodo","todoId","Todolist","todos","useSelector","state","length","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","newTodos","action","console","log","push","alert","index","findIndex","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78955492.chunk.js","sourcesContent":["export const ADD_TODO = \"ADD_TODO\";\r\nexport const UPDATE_TODO = \"UPDATE_TODO\";\r\nexport const DELETE_TODO = \"DELETE_TODO\";\r\n\r\nexport function addTodo(todo) {\r\n    return { type: ADD_TODO, payload: todo };\r\n}\r\n\r\nexport function deleteTodo(todoId) {\r\n    return { type: DELETE_TODO, payload: todoId };\r\n}\r\n\r\nexport function updateTodo(todo) {\r\n    return { type: UPDATE_TODO, payload: todo };\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTodo } from \"../reducer/actions\";\r\n\r\nconst Todoinput = () => {\r\n    let dispatch = useDispatch();\r\n    let [name, setname] = useState(\"\");\r\n    return (\r\n        <div className=\"form\">\r\n            <input\r\n                onInput={(e) => setname(e.target.value)}\r\n                value={name}\r\n                type=\"text\"\r\n                placeholder=\"Enter Your Task\"\r\n            />\r\n            <button\r\n                onClick={() => {\r\n                    dispatch(\r\n                        addTodo({\r\n                            id: Math.random(),\r\n                            name: name,\r\n                        })\r\n                    );\r\n                    setname(\"\");\r\n                }}\r\n                className=\"btn_add\"\r\n            >\r\n                Add\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todoinput;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteTodo, updateTodo } from \"./../reducer/actions\";\r\n\r\nconst Todoitem = ({ todo }) => {\r\n    const [eitdable, setEitdable] = useState(false);\r\n    const [finshed, setFinshed] = useState(false);\r\n    const [name, setName] = useState(todo.name);\r\n    let dispatch = useDispatch();\r\n    return (\r\n        <div>\r\n            <div className={finshed ? \"item done\" : \"item \"}>\r\n                {eitdable ? (\r\n                    <input\r\n                        type=\"text\"\r\n                        defaultValue={name}\r\n                        onInput={(e) => setName(e.target.value)}\r\n                    />\r\n                ) : (\r\n                    <h2>{finshed ? <del>{todo.name}</del> : todo.name}</h2>\r\n                )}\r\n\r\n                <div className=\"btn-actions\">\r\n                    {finshed ? (\r\n                        \"\"\r\n                    ) : (\r\n                        <button\r\n                            onClick={() => {\r\n                                setEitdable(!eitdable);\r\n                                if (eitdable) {\r\n                                    setName(name);\r\n                                    dispatch(updateTodo({ ...todo, name }));\r\n                                }\r\n                            }}\r\n                            className=\"btn_edit\"\r\n                        >\r\n                            {eitdable ? \"Update\" : \"Edit\"}\r\n                        </button>\r\n                    )}\r\n\r\n                    {eitdable ? (\r\n                        \"\"\r\n                    ) : (\r\n                        <button\r\n                            onClick={() => {\r\n                                dispatch(deleteTodo(todo.id));\r\n                            }}\r\n                            className=\"btn_delete\"\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    )}\r\n                    {eitdable ? (\r\n                        \"\"\r\n                    ) : (\r\n                        <button\r\n                            onClick={() => {\r\n                                setFinshed(!finshed);\r\n                            }}\r\n                            className=\"btn_edit\"\r\n                        >\r\n                            Done\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <br />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todoitem;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Todoitem from \"./todoItem\";\r\n\r\nconst Todolist = () => {\r\n    let todos = useSelector((state) => state);\r\n    return (\r\n        <div className=\"list\">\r\n            {todos.length > 0 ? (\r\n                todos.map((todo) => {\r\n                    return <Todoitem key={todo.id} todo={todo} />;\r\n                })\r\n            ) : (\r\n                <h2>You Do`t Have Any Task Now </h2>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todolist;\r\n","import React from \"react\";\r\nimport Todoinput from \"./components/todoInput\";\r\nimport Todolist from \"./components/todoList\";\r\n\r\nimport \"./sass/_app.scss\";\r\nconst App = () => {\r\n    return (\r\n        <div className=\"app\">\r\n            <Todoinput />\r\n            <Todolist />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export let todos = [];\r\n","import { createStore } from \"redux\";\r\nimport { reducer } from \"./reducer\";\r\n\r\nexport let store = createStore(reducer);\r\n","import { ADD_TODO, UPDATE_TODO, DELETE_TODO } from \"./actions\";\r\nimport { todos } from \"./states\";\r\n\r\nexport let reducer = (state = todos, action) => {\r\n    let newTodos;\r\n    switch (action.type) {\r\n        case ADD_TODO:\r\n            console.log();\r\n            newTodos = [...state];\r\n            if (action.payload.name !== \"\") {\r\n                newTodos.push(action.payload);\r\n            } else {\r\n                alert(\"you can`t add empty\");\r\n            }\r\n            return newTodos;\r\n        case UPDATE_TODO:\r\n            newTodos = [...state];\r\n            const index = newTodos.findIndex(\r\n                (todo) => todo.id === action.payload.id\r\n            );\r\n            newTodos[index].name = action.payload.name;\r\n            return newTodos;\r\n        case DELETE_TODO:\r\n            newTodos = [...state];\r\n            newTodos = newTodos.filter((todo) => todo.id !== action.payload);\r\n            return newTodos;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./reducer/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}